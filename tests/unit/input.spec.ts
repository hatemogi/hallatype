import { 한글 } from '@/charactor';
import { 상태코드, 머신상태, 상태전이, 입력머신, 위치이동 } from '@/input';
import { 글자종류 } from '@/charactor';

describe('오토마타', () => {
    const 상태 = 상태코드;
    const 없음 = 한글.없음;
    const 위치 = 위치이동;
    const 한 = (초성: number, 중성: number, 종성: number) =>  new 한글(초성, 중성, 종성);
    const 예상결과 =
        ([시작상태, 쉬프트, 키]: [머신상태, boolean, string], 결과: [위치이동, 상태코드, 한글, 한글]) =>
         expect(상태전이(시작상태, [쉬프트, 키])).toEqual(결과);
    it('상태.S0에서', () => {
        const S0: 머신상태 = [상태.S0, 없음, 없음];
        예상결과([S0, false, 'KeyR'],      [위치.유지, 상태.S10, 없음, 한(1, 0, 0)]);
        예상결과([S0, true, 'KeyR'],       [위치.유지, 상태.S11, 없음, 한(2, 0, 0)]);
        예상결과([S0, false, 'KeyK'],      [위치.유지, 상태.S20, 없음, 한(0, 1, 0)]);
        예상결과([S0, false, 'Backspace'], [위치.이전, 상태.S0, 없음, 없음]);
    });

    it('상태.S10에서', () => {
        const S10: 머신상태 = [상태.S10, 없음, 한(1, 0, 0)];
        예상결과([S10, false, 'KeyR'], [위치.유지, 상태.S11, 없음, 한(2, 0, 0)]);
        예상결과([S10, false, 'KeyW'], [위치.다음, 상태.S10, 한(1, 0, 0), 한(13, 0, 0)]);
        예상결과([S10, true, 'KeyR'],  [위치.다음, 상태.S11, 한(1, 0, 0), 한(2, 0, 0)]);
        예상결과([S10, false, 'KeyL'], [위치.유지, 상태.S20, 없음, 한(1, 21, 0)]);
        예상결과([S10, true, 'KeyO'],  [위치.유지, 상태.S20, 없음, 한(1, 4, 0)]);
    });

    it('상태.S11에서', () => {
        const S11: 머신상태 = [상태.S11, 없음, 한(2, 0, 0)];
        예상결과([S11, false, 'KeyS'],      [위치.다음, 상태.S10, 한(2, 0, 0), 한(3, 0, 0)]);
        예상결과([S11, false, 'KeyJ'],      [위치.유지, 상태.S20, 없음, 한(2, 5, 0)]);
        예상결과([S11, false, 'Backspace'], [위치.유지, 상태.S10, 없음, 한(1, 0, 0)]);
    });

    it('상태.S20에서', () => {
        const S20: 머신상태 = [상태.S20, 없음, 한(1, 5, 0)];
        예상결과([S20, false, 'Backspace'], [위치.유지, 상태.S10, 없음,  한(1, 0, 0)]);
        예상결과([S20, false, 'KeyN'],      [위치.다음, 상태.S20, 한(1, 5, 0), 한(0, 14, 0)]);
        예상결과([S20, false, 'KeyS'],      [위치.유지, 상태.S30, 없음,  한(1, 5, 3)]);
        // TODO: 두 번 입력하는 모음 처리
        const S202: 머신상태 = [상태.S20, 없음, 한(2, 9, 0)];
        예상결과([S202, false, 'Backspace'], [위치.유지, 상태.S11, 없음,  한(2, 0, 0)]);
        예상결과([S202, false, 'KeyK'], [위치.유지, 상태.S21, 없음, 한(2, 10, 0)]);
    });

    it('입력머신', () => {
        const 머신 = new 입력머신();
        const [이동, 완성, 조립] = 머신.입력([false, 'a']);
        expect(이동).toEqual(위치이동.유지);
    });
});
